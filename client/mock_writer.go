// Code generated by mockery v2.15.0. DO NOT EDIT.

package dbclient

import (
	context "context"

	types "github.com/pokt-foundation/portal-db/types"
	mock "github.com/stretchr/testify/mock"
)

// MockIDBWriter is an autogenerated mock type for the IDBWriter type
type MockIDBWriter struct {
	mock.Mock
}

// AcceptLoadBalancerUser provides a mock function with given fields: ctx, email, loadBalancerID, userID
func (_m *MockIDBWriter) AcceptLoadBalancerUser(ctx context.Context, email string, loadBalancerID string, userID string) (*types.LoadBalancer, error) {
	ret := _m.Called(ctx, email, loadBalancerID, userID)

	var r0 *types.LoadBalancer
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *types.LoadBalancer); ok {
		r0 = rf(ctx, email, loadBalancerID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.LoadBalancer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, email, loadBalancerID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ActivateBlockchain provides a mock function with given fields: ctx, blockchainID, active
func (_m *MockIDBWriter) ActivateBlockchain(ctx context.Context, blockchainID string, active bool) (bool, error) {
	ret := _m.Called(ctx, blockchainID, active)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) bool); ok {
		r0 = rf(ctx, blockchainID, active)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = rf(ctx, blockchainID, active)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateApplication provides a mock function with given fields: ctx, application
func (_m *MockIDBWriter) CreateApplication(ctx context.Context, application types.Application) (*types.Application, error) {
	ret := _m.Called(ctx, application)

	var r0 *types.Application
	if rf, ok := ret.Get(0).(func(context.Context, types.Application) *types.Application); ok {
		r0 = rf(ctx, application)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Application)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.Application) error); ok {
		r1 = rf(ctx, application)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBlockchain provides a mock function with given fields: ctx, blockchain
func (_m *MockIDBWriter) CreateBlockchain(ctx context.Context, blockchain types.Blockchain) (*types.Blockchain, error) {
	ret := _m.Called(ctx, blockchain)

	var r0 *types.Blockchain
	if rf, ok := ret.Get(0).(func(context.Context, types.Blockchain) *types.Blockchain); ok {
		r0 = rf(ctx, blockchain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Blockchain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.Blockchain) error); ok {
		r1 = rf(ctx, blockchain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBlockchainRedirect provides a mock function with given fields: ctx, redirect
func (_m *MockIDBWriter) CreateBlockchainRedirect(ctx context.Context, redirect types.Redirect) (*types.Redirect, error) {
	ret := _m.Called(ctx, redirect)

	var r0 *types.Redirect
	if rf, ok := ret.Get(0).(func(context.Context, types.Redirect) *types.Redirect); ok {
		r0 = rf(ctx, redirect)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Redirect)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.Redirect) error); ok {
		r1 = rf(ctx, redirect)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLoadBalancer provides a mock function with given fields: ctx, loadBalancer
func (_m *MockIDBWriter) CreateLoadBalancer(ctx context.Context, loadBalancer types.LoadBalancer) (*types.LoadBalancer, error) {
	ret := _m.Called(ctx, loadBalancer)

	var r0 *types.LoadBalancer
	if rf, ok := ret.Get(0).(func(context.Context, types.LoadBalancer) *types.LoadBalancer); ok {
		r0 = rf(ctx, loadBalancer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.LoadBalancer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.LoadBalancer) error); ok {
		r1 = rf(ctx, loadBalancer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLoadBalancerUser provides a mock function with given fields: ctx, loadBalancerID, user
func (_m *MockIDBWriter) CreateLoadBalancerUser(ctx context.Context, loadBalancerID string, user types.UserAccess) (*types.LoadBalancer, error) {
	ret := _m.Called(ctx, loadBalancerID, user)

	var r0 *types.LoadBalancer
	if rf, ok := ret.Get(0).(func(context.Context, string, types.UserAccess) *types.LoadBalancer); ok {
		r0 = rf(ctx, loadBalancerID, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.LoadBalancer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, types.UserAccess) error); ok {
		r1 = rf(ctx, loadBalancerID, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLoadBalancerUser provides a mock function with given fields: ctx, loadBalancerID, email
func (_m *MockIDBWriter) DeleteLoadBalancerUser(ctx context.Context, loadBalancerID string, email string) (*types.LoadBalancer, error) {
	ret := _m.Called(ctx, loadBalancerID, email)

	var r0 *types.LoadBalancer
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *types.LoadBalancer); ok {
		r0 = rf(ctx, loadBalancerID, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.LoadBalancer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, loadBalancerID, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveApplication provides a mock function with given fields: ctx, id
func (_m *MockIDBWriter) RemoveApplication(ctx context.Context, id string) (*types.Application, error) {
	ret := _m.Called(ctx, id)

	var r0 *types.Application
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.Application); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Application)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveLoadBalancer provides a mock function with given fields: ctx, id
func (_m *MockIDBWriter) RemoveLoadBalancer(ctx context.Context, id string) (*types.LoadBalancer, error) {
	ret := _m.Called(ctx, id)

	var r0 *types.LoadBalancer
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.LoadBalancer); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.LoadBalancer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAppFirstDateSurpassed provides a mock function with given fields: ctx, updateInput
func (_m *MockIDBWriter) UpdateAppFirstDateSurpassed(ctx context.Context, updateInput types.UpdateFirstDateSurpassed) ([]*types.Application, error) {
	ret := _m.Called(ctx, updateInput)

	var r0 []*types.Application
	if rf, ok := ret.Get(0).(func(context.Context, types.UpdateFirstDateSurpassed) []*types.Application); ok {
		r0 = rf(ctx, updateInput)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Application)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.UpdateFirstDateSurpassed) error); ok {
		r1 = rf(ctx, updateInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApplication provides a mock function with given fields: ctx, id, update
func (_m *MockIDBWriter) UpdateApplication(ctx context.Context, id string, update types.UpdateApplication) (*types.Application, error) {
	ret := _m.Called(ctx, id, update)

	var r0 *types.Application
	if rf, ok := ret.Get(0).(func(context.Context, string, types.UpdateApplication) *types.Application); ok {
		r0 = rf(ctx, id, update)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Application)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, types.UpdateApplication) error); ok {
		r1 = rf(ctx, id, update)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBlockchain provides a mock function with given fields: ctx, blockchainID, chainUpdate
func (_m *MockIDBWriter) UpdateBlockchain(ctx context.Context, blockchainID string, chainUpdate types.UpdateBlockchain) (*types.Blockchain, error) {
	ret := _m.Called(ctx, blockchainID, chainUpdate)

	var r0 *types.Blockchain
	if rf, ok := ret.Get(0).(func(context.Context, string, types.UpdateBlockchain) *types.Blockchain); ok {
		r0 = rf(ctx, blockchainID, chainUpdate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Blockchain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, types.UpdateBlockchain) error); ok {
		r1 = rf(ctx, blockchainID, chainUpdate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLoadBalancer provides a mock function with given fields: ctx, id, lbUpdate
func (_m *MockIDBWriter) UpdateLoadBalancer(ctx context.Context, id string, lbUpdate types.UpdateLoadBalancer) (*types.LoadBalancer, error) {
	ret := _m.Called(ctx, id, lbUpdate)

	var r0 *types.LoadBalancer
	if rf, ok := ret.Get(0).(func(context.Context, string, types.UpdateLoadBalancer) *types.LoadBalancer); ok {
		r0 = rf(ctx, id, lbUpdate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.LoadBalancer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, types.UpdateLoadBalancer) error); ok {
		r1 = rf(ctx, id, lbUpdate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLoadBalancerUserRole provides a mock function with given fields: ctx, loadBalancerID, email, roleName
func (_m *MockIDBWriter) UpdateLoadBalancerUserRole(ctx context.Context, loadBalancerID string, email string, roleName types.RoleName) (*types.LoadBalancer, error) {
	ret := _m.Called(ctx, loadBalancerID, email, roleName)

	var r0 *types.LoadBalancer
	if rf, ok := ret.Get(0).(func(context.Context, string, string, types.RoleName) *types.LoadBalancer); ok {
		r0 = rf(ctx, loadBalancerID, email, roleName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.LoadBalancer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, types.RoleName) error); ok {
		r1 = rf(ctx, loadBalancerID, email, roleName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockIDBWriter interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockIDBWriter creates a new instance of MockIDBWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockIDBWriter(t mockConstructorTestingTNewMockIDBWriter) *MockIDBWriter {
	mock := &MockIDBWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
