// Code generated by mockery v2.15.0. DO NOT EDIT.

package dbclient

import (
	context "context"

	types "github.com/pokt-foundation/portal-db/v2/types"
	mock "github.com/stretchr/testify/mock"
)

// MockIDBReader is an autogenerated mock type for the IDBReader type
type MockIDBReader struct {
	mock.Mock
}

// GetAccountByID provides a mock function with given fields: ctx, accountID
func (_m *MockIDBReader) GetAccountByID(ctx context.Context, accountID types.AccountID) (*types.Account, error) {
	ret := _m.Called(ctx, accountID)

	var r0 *types.Account
	if rf, ok := ret.Get(0).(func(context.Context, types.AccountID) *types.Account); ok {
		r0 = rf(ctx, accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.AccountID) error); ok {
		r1 = rf(ctx, accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountsByUser provides a mock function with given fields: ctx, userID
func (_m *MockIDBReader) GetAccountsByUser(ctx context.Context, userID types.UserID) ([]*types.Account, error) {
	ret := _m.Called(ctx, userID)

	var r0 []*types.Account
	if rf, ok := ret.Get(0).(func(context.Context, types.UserID) []*types.Account); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.UserID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllChains provides a mock function with given fields: ctx
func (_m *MockIDBReader) GetAllChains(ctx context.Context) ([]*types.Chain, error) {
	ret := _m.Called(ctx)

	var r0 []*types.Chain
	if rf, ok := ret.Get(0).(func(context.Context) []*types.Chain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Chain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllPortalApps provides a mock function with given fields: ctx
func (_m *MockIDBReader) GetAllPortalApps(ctx context.Context) ([]*types.PortalApp, error) {
	ret := _m.Called(ctx)

	var r0 []*types.PortalApp
	if rf, ok := ret.Get(0).(func(context.Context) []*types.PortalApp); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.PortalApp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockedContracts provides a mock function with given fields: ctx
func (_m *MockIDBReader) GetBlockedContracts(ctx context.Context) (types.GlobalBlockedContracts, error) {
	ret := _m.Called(ctx)

	var r0 types.GlobalBlockedContracts
	if rf, ok := ret.Get(0).(func(context.Context) types.GlobalBlockedContracts); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(types.GlobalBlockedContracts)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChainByID provides a mock function with given fields: ctx, chainID
func (_m *MockIDBReader) GetChainByID(ctx context.Context, chainID types.RelayChainID) (*types.Chain, error) {
	ret := _m.Called(ctx, chainID)

	var r0 *types.Chain
	if rf, ok := ret.Get(0).(func(context.Context, types.RelayChainID) *types.Chain); ok {
		r0 = rf(ctx, chainID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Chain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.RelayChainID) error); ok {
		r1 = rf(ctx, chainID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPortalAppByID provides a mock function with given fields: ctx, portalAppID
func (_m *MockIDBReader) GetPortalAppByID(ctx context.Context, portalAppID types.PortalAppID) (*types.PortalApp, error) {
	ret := _m.Called(ctx, portalAppID)

	var r0 *types.PortalApp
	if rf, ok := ret.Get(0).(func(context.Context, types.PortalAppID) *types.PortalApp); ok {
		r0 = rf(ctx, portalAppID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.PortalApp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.PortalAppID) error); ok {
		r1 = rf(ctx, portalAppID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPortalAppsByUser provides a mock function with given fields: ctx, userID, filter
func (_m *MockIDBReader) GetPortalAppsByUser(ctx context.Context, userID types.UserID, filter types.RoleName) ([]*types.PortalApp, error) {
	ret := _m.Called(ctx, userID, filter)

	var r0 []*types.PortalApp
	if rf, ok := ret.Get(0).(func(context.Context, types.UserID, types.RoleName) []*types.PortalApp); ok {
		r0 = rf(ctx, userID, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.PortalApp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.UserID, types.RoleName) error); ok {
		r1 = rf(ctx, userID, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserPermissionByUserID provides a mock function with given fields: ctx, providerUserID
func (_m *MockIDBReader) GetUserPermissionByUserID(ctx context.Context, providerUserID types.ProviderUserID) (*types.UserPermissions, error) {
	ret := _m.Called(ctx, providerUserID)

	var r0 *types.UserPermissions
	if rf, ok := ret.Get(0).(func(context.Context, types.ProviderUserID) *types.UserPermissions); ok {
		r0 = rf(ctx, providerUserID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.UserPermissions)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.ProviderUserID) error); ok {
		r1 = rf(ctx, providerUserID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockIDBReader interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockIDBReader creates a new instance of MockIDBReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockIDBReader(t mockConstructorTestingTNewMockIDBReader) *MockIDBReader {
	mock := &MockIDBReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
