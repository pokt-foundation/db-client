// Code generated by mockery v2.15.0. DO NOT EDIT.

package dbclient

import (
	context "context"

	types "github.com/pokt-foundation/portal-db/types"
	mock "github.com/stretchr/testify/mock"
)

// MockIDBReader is an autogenerated mock type for the IDBReader type
type MockIDBReader struct {
	mock.Mock
}

// GetApplicationByID provides a mock function with given fields: ctx, applicationID
func (_m *MockIDBReader) GetApplicationByID(ctx context.Context, applicationID string) (*types.Application, error) {
	ret := _m.Called(ctx, applicationID)

	var r0 *types.Application
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.Application); ok {
		r0 = rf(ctx, applicationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Application)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, applicationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApplications provides a mock function with given fields: ctx
func (_m *MockIDBReader) GetApplications(ctx context.Context) ([]*types.Application, error) {
	ret := _m.Called(ctx)

	var r0 []*types.Application
	if rf, ok := ret.Get(0).(func(context.Context) []*types.Application); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Application)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApplicationsByUserID provides a mock function with given fields: ctx, userID
func (_m *MockIDBReader) GetApplicationsByUserID(ctx context.Context, userID string) ([]*types.Application, error) {
	ret := _m.Called(ctx, userID)

	var r0 []*types.Application
	if rf, ok := ret.Get(0).(func(context.Context, string) []*types.Application); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Application)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockchainByID provides a mock function with given fields: ctx, blockchainID
func (_m *MockIDBReader) GetBlockchainByID(ctx context.Context, blockchainID string) (*types.Blockchain, error) {
	ret := _m.Called(ctx, blockchainID)

	var r0 *types.Blockchain
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.Blockchain); ok {
		r0 = rf(ctx, blockchainID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Blockchain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, blockchainID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockchains provides a mock function with given fields: ctx
func (_m *MockIDBReader) GetBlockchains(ctx context.Context) ([]*types.Blockchain, error) {
	ret := _m.Called(ctx)

	var r0 []*types.Blockchain
	if rf, ok := ret.Get(0).(func(context.Context) []*types.Blockchain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Blockchain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoadBalancerByID provides a mock function with given fields: ctx, loadBalancerID
func (_m *MockIDBReader) GetLoadBalancerByID(ctx context.Context, loadBalancerID string) (*types.LoadBalancer, error) {
	ret := _m.Called(ctx, loadBalancerID)

	var r0 *types.LoadBalancer
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.LoadBalancer); ok {
		r0 = rf(ctx, loadBalancerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.LoadBalancer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, loadBalancerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoadBalancers provides a mock function with given fields: ctx
func (_m *MockIDBReader) GetLoadBalancers(ctx context.Context) ([]*types.LoadBalancer, error) {
	ret := _m.Called(ctx)

	var r0 []*types.LoadBalancer
	if rf, ok := ret.Get(0).(func(context.Context) []*types.LoadBalancer); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.LoadBalancer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoadBalancersByUserID provides a mock function with given fields: ctx, userID
func (_m *MockIDBReader) GetLoadBalancersByUserID(ctx context.Context, userID string) ([]*types.LoadBalancer, error) {
	ret := _m.Called(ctx, userID)

	var r0 []*types.LoadBalancer
	if rf, ok := ret.Get(0).(func(context.Context, string) []*types.LoadBalancer); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.LoadBalancer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPayPlanByType provides a mock function with given fields: ctx, payPlanType
func (_m *MockIDBReader) GetPayPlanByType(ctx context.Context, payPlanType types.PayPlanType) (*types.PayPlan, error) {
	ret := _m.Called(ctx, payPlanType)

	var r0 *types.PayPlan
	if rf, ok := ret.Get(0).(func(context.Context, types.PayPlanType) *types.PayPlan); ok {
		r0 = rf(ctx, payPlanType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.PayPlan)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.PayPlanType) error); ok {
		r1 = rf(ctx, payPlanType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPayPlans provides a mock function with given fields: ctx
func (_m *MockIDBReader) GetPayPlans(ctx context.Context) ([]*types.PayPlan, error) {
	ret := _m.Called(ctx)

	var r0 []*types.PayPlan
	if rf, ok := ret.Get(0).(func(context.Context) []*types.PayPlan); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.PayPlan)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockIDBReader interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockIDBReader creates a new instance of MockIDBReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockIDBReader(t mockConstructorTestingTNewMockIDBReader) *MockIDBReader {
	mock := &MockIDBReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
